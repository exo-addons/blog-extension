	<%
		import java.util.ArrayList;
		import java.net.URLEncoder;

		import org.exoplatform.ecm.webui.utils.Utils ;
		import org.exoplatform.web.application.Parameter ;
		import org.exoplatform.webui.core.UIRightClickPopupMenu ;
		import org.exoplatform.ecm.webui.component.explorer.UIWorkingArea;
		import org.exoplatform.ecm.webui.component.explorer.DocumentProviderUtils;
		import org.exoplatform.ecm.jcr.model.Preference;
		import org.exoplatform.ecm.webui.component.explorer.UIJCRExplorer;
		import org.exoplatform.services.jcr.RepositoryService;
		import javax.jcr.Value;
		import javax.jcr.PathNotFoundException;
		import org.exoplatform.services.cms.link.LinkManager;
		import org.exoplatform.services.wcm.utils.WCMCoreUtils;
		import org.exoplatform.wcm.webui.reader.ContentReader;
		import org.exoplatform.com.blog.service.BlogService;
		import org.exoplatform.services.organization.OrganizationService;
		import org.exoplatform.services.cms.comments.CommentsService;

		// Content view
		import java.util.Date;
		import javax.jcr.Node;
		import org.exoplatform.services.wcm.publication.WCMPublicationService;
		// Content view

		def linkManager = WCMCoreUtils.getService(LinkManager.class);
		def uiWorkingArea = uicomponent.getAncestorOfType(UIWorkingArea.class);
		def uiExplorer = uicomponent.getAncestorOfType(UIJCRExplorer.class);
		def pref = uiExplorer.getPreference();
		def enableDragAndDrop = pref.isEnableDragAndDrop();
		def uiCustomActionComponent = uiWorkingArea.getCustomAction();
		def managersMultiItemContext =  uiWorkingArea.getMultiActionsExtensionList();
		def managersGroundContext = uiWorkingArea.getGroundActionsExtensionList();
		def action = "";
		def permLinkComponent = null;
  	def blogService = WCMCoreUtils.getService(BlogService.class);
		OrganizationService organizationService = uicomponent.getApplicationComponent(OrganizationService.class)

		UIRightClickPopupMenu contextMenu = uicomponent.getContextMenu() ;
		String componentId = uicomponent.getId();
		java.text.DateFormat dateFormat = uicomponent.getSimpleDateFormat();
		def viewComponentId  = new Date().getTime();
		def rcontext = _ctx.getRequestContext() ;
		def size = uicomponent.getChildrenList().size();
		def jsManager = rcontext.getJavascriptManager();

		jsManager.require("SHARED/ecm-utils", "ecmutil").
							require("SHARED/uiListView", "uiListView").
							require("SHARED/multiUpload", "multiUpload").
		addScripts("uiListView.UIListView.initAllEvent('${componentId}-$viewComponentId', '$enableDragAndDrop');").
		addScripts('uiListView.UIListView.loadEffectedWidthColumn();');

		//Config to display columns with format: ["${column};${width}"]
		//Default
		String[] arrColumns = ["exo:dateCreated;123px", "exo:owner;123px"];
		String serverUrl= uicomponent.getWebDAVServerPrefix();

	%>

	<div id="$componentId" >
		<div id="${componentId}-$viewComponentId" class="uiListView $componentId">


			<div class="uiListGrid">
				<div class="uiBox noRounded">
					<div class="titleTable clearfix">
					<%
						String selectedSortType = uicomponent.getTypeSort() ;
						String sortOrder = uicomponent.getSortOrder();
						String typeActionLink = "";
						if (sortOrder.equals("Down")) {
						typeActionLink = "Descending;";
						} else {
						typeActionLink = "Ascending;";
						}
					%>
					<div class="columnIcon" style="width: 20px;" onclick="<%= uicomponent.event("Sort", typeActionLink + "Type")%>" style="cursor:pointer;">
							<%
								if (selectedSortType.equals("Type")) {
									%>
										<i class="uiIconArrow${sortOrder} uiIconLightGrey"></i>
									<%
								}
							%>
						</div>
		<!-- Title -->
						<div class="columnName" style="width: 300px;" onclick="<%=uicomponent.event("Sort", typeActionLink + "Alphabetic")%>" style="cursor:pointer;">
							<%
								if (selectedSortType.equals("Alphabetic")) {
									%>
										<i class="uiIconArrow${sortOrder} uiIconLightGrey pull-right"></i>
										Title
									<%
								} else {
									%>Title<%
								}
							%>
						</div>
				<%if(componentId == "UIDocumentInfo"){%>
					<div class="columnStatus column" style="width: 93px;"><i class="uiIconEcmsAddCategory uiIconEcmsLightGray"></i>Categories</div>
					<div class="columnStatus column" style="width: 93px;"><i class="uiIconComment"></i>Comments</div>
					<div class="columnStatus column" style="width: 93px;"><i class="uiIconViewCount"></i>Views</div>
				<%}else{%>
					<div class="lineLeft" onmousedown="eXo.ecm.UIListView.resizeColumn(this, event);" onkeydown="eXo.ecm.UIListView.resizeColumn(this, event);"><span></span></div>
					<!-- Date created -->
					<div class="columnDatetime column" style="width: 200px;" onclick="<%=uicomponent.event("Sort", typeActionLink + "exo:dateCreated")%>" style="cursor:pointer;">
					<% if (selectedSortType.equals("exo:dateCreated")) { %>
      			<i class="uiIconArrow${sortOrder} uiIconLightGrey pull-right"></i> Last Change
					<% } else { %>Last Change<% } %>
					</div>
				<%}%>
			</div>
					<div style="position: relative; top: 0px; left: 0px; width: 0px; height: 0px">
						<div class="Mask" style="position: absolute; top: 0px; left: 0px; width: 0px; height: 0px"></div>
						<div class="JCRMoveAction" style="display: none;" request="<%=uiWorkingArea.getJCRMoveAction().event(UIWorkingArea.MOVE_NODE)%>" symlink="<%=uiWorkingArea.getCreateLinkAction().event(UIWorkingArea.CREATE_LINK)%>"></div>
						<div class="ItemContextMenu" style="position: absolute; top: 0px; left: 0px; display: none;">
							<div class="uiRightClickPopupMenu" style="display: block;">
								<ul class="dropdown-menu uiRightPopupMenuContainer" onmousedown="event.cancelBubble = true;" onkeydown="event.cancelBubble = true;">
									<%
										for(itemContext in managersMultiItemContext) {
											action = itemContext.getUIExtensionName();
											%>
												<li class="menuItem" style="display: block;">
													<a onclick=eXo.ecm.UIListView.postGroupAction("<%=itemContext.event(action)%>")>
														<i class="uiIconEcms${action}"></i> <%=_ctx.appRes("ECMContextMenu.event." + action)%>
													</a>
												</li>
											<%
										}
									%>
								</ul>
							</div>
						</div>
						<div class="groundContextMenu" style="position: absolute; top: 0px; left: 0px; display: none;">
							<div class="uiRightClickPopupMenu" style="display: block;">
								<ul class="dropdown-menu uiRightPopupMenuContainer" onmousedown="event.cancelBubble = true;" onkeydown="event.cancelBubble = true;">
									<%
										for(itemGroundContext in managersGroundContext) {
											action = itemGroundContext.getUIExtensionName();
											def actionClick = "Upload".equals(action) ? "eXo.ecm.MultiUpload.uploadByRightClick()" : itemGroundContext.event(action);
											%>
											<li class="menuItem" style="display: block;">
												<a onclick="<%=actionClick%>" href="javascript:void(0)">
													<i class="uiIconEcms${action}"></i> <%=_ctx.appRes("ECMContextMenu.event." + action)%>
												</a>
											</li>
											<%
										}//for
									%>
								</ul>
							</div>
						</div>
				</div> <!-- End TitleTable -->

				<%
					String portalName = uicomponent.getPortalName() ;
					RepositoryService rService = uicomponent.getApplicationComponent(RepositoryService.class) ;
					String repository = rService.getCurrentRepository().getConfiguration().getName();
					String restContextName = Utils.getRestContextName(portalName);
					WCMPublicationService wcmPublicationService = uicomponent.getApplicationComponent(WCMPublicationService.class);
					def permlink;
					int i = 0;
					String oddEvenClassRow = "odd";
					for (data in uicomponent.getChildrenList()) {
						try {
							data.getSession().getItem(data.getPath());
						} catch(PathNotFoundException pne) {
							continue;
						}
				if (data.isNodeType("exo:taxonomy")) continue;
						i++;
						def isPreferenceNode = uicomponent.isPreferenceNode(data) ;
						def preferenceWS = data.getSession().getWorkspace().getName() ;
						String nodePath = data.getPath() ;
						def isSymLink = false;
						isSymLink = uicomponent.isSymLink(data);
						// Content view
						//   Status
						def status = "";
						def targetNode;
						if(isSymLink) {
							targetNode = linkManager.getTarget(data);
							status = wcmPublicationService.getContentState(targetNode);
						} else {
							status = wcmPublicationService.getContentState(data);
						}


						if (status == null) status = "draft";
						def statusLabel = _ctx.appRes("UIPublicationPanel.status." + status)

						//   Title
						def title = uiWorkingArea.getTitle(data);
						//   Name
						def name = nodePath.substring(nodePath.lastIndexOf("/") + 1, nodePath.length()) ;
						name = ContentReader.getXSSCompatibilityContent(name);
						//   Datetime
						def date = uicomponent.getDateCreated(data);
						def datetime = dateFormat.format(date);

				//   Author
						def users = organizationService.getUserHandler();
						def author = ""
						try {
							author = uicomponent.getNodeOwner(data)
							author = users.findUserByName(author).getFullName()
						} catch (Exception e) {
							; // ignore
						}

				//  Datevent
				def datevent = ""

						if ("draft".equals(status)) {
							datevent = "Modified"
						} else if ("published".equals(status)) {
							datevent = "Published"
						}
				//category
					def postCategory = "unknow";
					if(targetNode.hasProperty("exo:category")) {
      			postCategory = node.getProperty("exo:category").getString();
      		}
				// visited total

					def visitedPost = 0;
					try{
						visitedPost = blogService.getPostViewCount(nodePath);
					}catch (Exception e) {
						//print(e.getMessage())
					}
				//  Comment Count
				def commentCount = 0;
						try {
							def comments = uicomponent.getApplicationComponent(CommentsService.class).getComments(targetNode, null)

							commentCount = comments.size
						} catch (Exception e) {
							; // ignore
						}
						// Content view

						String subName ;
						String actionLink = uicomponent.event("ChangeNode",Utils.formatNodeName(data.path), new Parameter("workspaceName", preferenceWS)) ;
						//Begin permlink
						permLinkComponent =  uiWorkingArea.getPermlink(data);
						String strActs = "<li class=\"RightClickCustomItem\" style=\"display: none;\">" ;
						strActs += "<ul>";
						if (permLinkComponent != null) {
							permlink = permLinkComponent.getUIExtensionName();
							strActs +=  "<li class='menuItem'>";
							strActs +=  "<a exo:attr='ViewDocument' style='display: block;' href=\"" + permLinkComponent.getPermlink(data) + "\" target='_new' onclick=\"return eXo.ecm.WCMUtils.hideContextMenu(this);\">" ;
							strActs +=  " <i class='uiIconEcmsViewDocument uiIconEcmsLightGrey'>" ;
							strActs +=  " </i> ";
							strActs +=    _ctx.appRes("ECMContextMenu.event." + permlink);
							strActs +=  "</a>";
							strActs += "</li>";
						}

						//Begin WebDav Action
						if (!data.isNodeType(Utils.EXO_RESTORELOCATION) && !Utils.isTrashHomeNode(data)) {
							if (data.getPrimaryNodeType().getName().equals("nt:file")) {
					String mimeType="";
					try {
						mimeType=data.getNode("jcr:content").getProperty("jcr:mimeType").getString();
					} catch (Exception e) {
					}
					// This escape "'" for js
					String webDavPath = data.getPath().contains("%27") ? data.getPath().replaceAll("%27","%2527") : data.getPath();
					String link ="javascript:eXo.ecm.ECMUtils.generateWebDAVLink('','"+ portalName +"','"+ restContextName +"','"+repository+"','"+ preferenceWS+ "','" + webDavPath +"','"+mimeType+"')";
					strActs +=  "<li class='menuItem'>";
					strActs +=    "<a exo:attr='Download' style='display: block;' onclick=\"return eXo.ecm.WCMUtils.hideContextMenu(this);\" href=\"" + link + "\" >" ;
					strActs +=    "  <i class=\"uiIconDownload uiIconLightGray\"></i> " + _ctx.appRes("ECMContextMenu.event.WebDavView");
					strActs +=    "</a>" ;
					strActs += "</li>";
							} else {
								def dataTarget = data;
								if(uicomponent.isSymLink(data)) dataTarget = Utils.getNodeSymLink(data);
								if (dataTarget != null) {
									String link = "/" + restContextName + "/private/jcr/" + repository+ "/" + preferenceWS + Utils.formatNodeName(dataTarget.getPath());
									strActs +=  "<li class='menuItem'>";
									strActs +=    "<a exo:attr='Download' style='display: block; {behavior: url(#default#AnchorClick);}' onclick=\"eXo.ecm.WCMUtils.hideContextMenu(this);window.open('" +link + "');\" target='_new' folder=\"" + link +"\">" ;
									strActs +=    "  <i class=\"uiIconDownload uiIconLightGray\"></i> " + _ctx.appRes("ECMContextMenu.event.WebDavView");
									strActs +=    "</a>" ;
									strActs += "</li>";
								}
							}
						} //End WebDav Action

						List customActs = uicomponent.getCustomActions(data);
						Parameter[] params ;
						if (customActs.size() > 0) {
							for (act in customActs) {
								String actName = act.getProperty("exo:name").getValue().getString() ;
								params = [new Parameter("workspaceName", preferenceWS), new Parameter("actionName",Utils.formatNodeName(act.getName()))] ;
								strActs +=  "<li class='menuItem'>";
								strActs += "<a exo:attr=\"" +  Utils.getNodeTypeIcon(act,"") + "\" style='display: block;' onclick=\"return eXo.webui.UIRightClickPopupMenu.prepareObjectId(event, this);\" href=\"" + uiCustomActionComponent.event("Custom",Utils.formatNodeName(nodePath),params) + "\">" ;
								strActs += "  <i class=\"" + Utils.getNodeTypeIcon(act, "uiIconEcms") + "\"></i> $actName" ;
								strActs += "</a>" ;
								strActs += "</li>";
							}
						}

						if (!data.isNodeType(Utils.EXO_RESTORELOCATION) && !Utils.isTrashHomeNode(data)) {
							String clipboardLink = serverUrl + "/" + restContextName + "/private/jcr/" + repository + "/" + preferenceWS + data.getPath();
							strActs +=  "<li class='menuItem'>";
							strActs +=  "<a exo:attr='CopyUrlToClipboard' style='display: block;' id='clip_button1$i' path='$clipboardLink'>" ;
							strActs +=  " <i class='uiIconEcmsCopyUrlToClipboard uiIconEcmsLightGrey'>" ;
							strActs +=  " </i> " ;
							strActs +=    _ctx.appRes("ECMContextMenu.event.GetURL");
							strActs +=  "</a>";
							strActs += "</li>";
						}
						strActs += "</ul></li>";
						def rightClickMenu = "" ;
						Boolean isLocked = false;
						String lockedLabel = "";
						String isFavourite = "false";
						String isInTrash = "false";
						String isMediaType = "false";
						String isTrashHome = "false";
						String hiddenStyle = (data.isNodeType("exo:hiddenable"))?"color: #A0A0A0;":"";
						if (data.isLocked()) {
							isLocked = true;
							lockedLabel  = "("+_ctx.appRes("UIDocumentWorkspace.tooltip.LockedBy")+" "+data.getLock().getLockOwner()+")";
						}
						if (uicomponent.isFavouriter(data)) isFavourite = "true";
						if (data.isNodeType("exo:restoreLocation")) isInTrash = "true";
						if (uicomponent.isMediaType(data)) isMediaType = "true";
						if (Utils.isTrashHomeNode(data)) isTrashHome = "true"
						if (!uicomponent.isSystemWorkspace()) rightClickMenu = contextMenu.getJSOnclickShowPopup(preferenceWS + ":" + Utils.formatNodeName(nodePath), uiWorkingArea.getActionsExtensionList(data)) ;
				def iconLabel = statusLabel
						if (isLocked) iconLabel += " - " + lockedLabel
						def statusIcon = ("published".equals(status)) ? "PublicationPublishIcon" : "PublicationDraftIcon"

						%>
							<div <%= uicomponent.getDragAndDropEvents(data) %>  <%=rightClickMenu%> class="rowView $oddEvenClassRow clearfix" trashHome="$isTrashHome" locked="$isLocked"
									 mediaType="$isMediaType" removeFavourite="$isFavourite" inTrash="$isInTrash" workspacename="$preferenceWS"
									 ondblclick="$actionLink" isFile="<%=data.isNodeType("nt:file")%>"
									 objectId="<%=org.exoplatform.services.cms.impl.Utils.getObjectId(nodePath)%>"
									 >$strActs
	<%if(targetNode!=null){%>
								<div class="columnIcon" style="width: 20px;height: 40px;">
									<div rel="tooltip" data-placement="bottom" title="<%=statusLabel%>">
											<div class="uiIconEcmsDottedArrow"></div>
									</div>
								</div>
	<!-- Title-->
								<div class="columnName" style="width:45%;height: 40px;">
										<div class="nodeLabel" style="$hiddenStyle" rel="tooltip" data-placement="bottom" title="$title $lockedLabel">
											<span class="nodeName"><strong><%=title%></strong>
												<%if ("draft".equals(status)) {%> -
													<span class="label label-important" style="background: blue;" ><%=statusLabel%></span>
													<span class="label label-important" >Published</span>
												<%}else if("published".equals(status)) {%>
												<span class="label label-important" >Darf</span>
												<span class="label label-important" style="background: blue;" ><%=statusLabel%></span>

												<%}%>
											</span>
						<br/><small><span class="muted">by <%=author%></span></small></div>
								</div>
      <!-- Categories -->
								<div class="columnCategory column" style="width: 93px;">
									<div class="nodeLabel" rel="tooltip" data-placement="bottom" title="<%=postCategory%> c">
										<span class="label label-info">$postCategory</span>
									</div>
								</div>

			<!-- Comments -->
								<div class="columnComment column" style="width: 93px;">
									<div class="nodeLabel" rel="tooltip" data-placement="bottom" title="<%=commentCount%> comments">
										<span class="label label-info"><%=commentCount %></span>
									</div>
								</div>
	<!-- Views-->
								<div class="columnViews column" style="width: 93px;">
										<div class="nodeLabel" rel="tooltip" data-placement="bottom" title="$visitedPost views">
											<span class="label label-info">$visitedPost</span>
										</div>
								</div>

	<%}else{%>
							<div class="lineLeftItem" style="height:55px;"><span></span></div>
							<!-- Title-->
							<div class="columnName" style="width:45%;height: 40px;">
								<div class="nodeLabel" style="$hiddenStyle" rel="tooltip" data-placement="bottom" title="$title $lockedLabel"><span class="nodeName"><strong><%=title%></strong><%if ("draft".equals(status)) {%> - <span class="label label-important"><%=statusLabel%></span><%}%></span>
									<br/><small><span class="muted">by <%=author%></span></small></div>
							</div>
							<div class="lineLeftItem" style="height:55px;"><span></span></div>
							<!-- Date created -->
							<div class="columnDatetime column" style="width: 200px;">
								<div class="nodeLabel" rel="tooltip" data-placement="bottom" title="<%= datetime %>"><%=datevent%> on <%= datetime %></div>
							</div>
	<%}%>
		</div>
						<%
						// Make css for odd and event rows
						oddEvenClassRow = (oddEvenClassRow.equals("odd"))? "even" : "odd";
					}
				%>
	</div> <!--end componentid div-->







	</div>
			<%
				//re-initialize action
				uiWorkingArea.initialize();
				int availablePage = uicomponent.getContentPageIterator().getAvailablePage();
				if (availablePage > 1) {
					%>
						<div class="PageAvailable" pageAvailable='$availablePage'>
							<%_ctx.renderUIComponent(uicomponent.getContentPageIterator())%>
						</div>
					<%
				}
			%>
		</div>
	</div>
