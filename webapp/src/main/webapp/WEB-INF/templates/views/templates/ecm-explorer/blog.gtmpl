<%
  import java.util.ArrayList;
  import java.net.URLEncoder;
  import org.exoplatform.ecm.webui.utils.Utils ;
  import org.exoplatform.web.application.Parameter ;
  import org.exoplatform.webui.core.UIRightClickPopupMenu ;
  import org.exoplatform.ecm.webui.component.explorer.UIWorkingArea;
  import org.exoplatform.ecm.webui.component.explorer.DocumentProviderUtils;
  import org.exoplatform.ecm.jcr.model.Preference;
  import org.exoplatform.ecm.webui.component.explorer.UIJCRExplorer;
  import org.exoplatform.services.jcr.RepositoryService;
  import javax.jcr.Value;
  import javax.jcr.PathNotFoundException;
  import org.exoplatform.services.cms.link.LinkManager;
  import org.exoplatform.services.wcm.utils.WCMCoreUtils;
  import org.exoplatform.wcm.webui.reader.ContentReader; 
 
  import org.exoplatform.services.organization.OrganizationService;
  import org.exoplatform.services.cms.comments.CommentsService;
  
  // Content view
  import java.util.Date;
  import javax.jcr.Node;
  import org.exoplatform.services.wcm.publication.WCMPublicationService;
  // Content view
  
   /**
    * Finds and returns the date information of the given node.
    *
    * @return DateFormat Live date if the current state is live. Otherwise, the
    * lastest modified date.
    */
   public Date getDate(Node node, String status) {
     Date date = null;
     try {
       if("live".equals(status)) {
         date = node.getProperty("publication:liveDate").getDate().getTime();
       } else if ("draft".equals(status) || "obsolete".equals(status)) {
         date = uicomponent.getDateModified(node); 
       } else {
         date = uicomponent.getDateCreated(node);
       }
     } catch (Exception e) {
       date = uicomponent.getDateCreated(node);
     }
     return date;
   }
   
   public boolean isDirty(Node data, def status) {
     try {

       def live = data.hasProperty("publication:liveRevision")
       
       if ("draft".equals(status) && (live == true) ) return true;
     } catch (Exception e) {
      ; // ignore
     }
     return false
   }
   
  def linkManager = WCMCoreUtils.getService(LinkManager.class);  
  def uiWorkingArea = uicomponent.getAncestorOfType(UIWorkingArea.class);
  def uiExplorer = uicomponent.getAncestorOfType(UIJCRExplorer.class);
  def pref = uiExplorer.getPreference();
  def enableDragAndDrop = pref.isEnableDragAndDrop();
  def uiCustomActionComponent = uiWorkingArea.getCustomAction();
  def managersMultiItemContext =  uiWorkingArea.getMultiActionsExtensionList();
  def managersGroundContext = uiWorkingArea.getGroundActionsExtensionList();
  def action = "";
  def permLinkComponent = null;
  
  OrganizationService organizationService = uicomponent.getApplicationComponent(OrganizationService.class)
          
  
  UIRightClickPopupMenu contextMenu = uicomponent.getContextMenu() ;
  String componentId = uicomponent.getId();
  java.text.DateFormat dateFormat = new java.text.SimpleDateFormat("dd-MMM-yyyy")//uicomponent.getSimpleDateFormat();
  def viewComponentId  = new Date().getTime();
  def rcontext = _ctx.getRequestContext() ;
  def size = uicomponent.getChildrenList().size();
  def jsManager = rcontext.getJavascriptManager();
  jsManager.require("SHARED/ecm-utils", "ecmutil").
            require("SHARED/uiListView", "uiListView").
            require("SHARED/multiUpload", "multiUpload").
  addScripts("uiListView.UIListView.initAllEvent('${componentId}-$viewComponentId', '$enableDragAndDrop');").
  addScripts("ecmutil.ECMUtils.initClipboard('clip_button','1','$size');");

  //remove because not use "uiListGrid" (<div class="uiListGrid">) to display
  //addScripts('uiListView.UIListView.loadEffectedWidthColumn();');
  
  //Config to display columns with format: ["${column};${width}"]
  //Default 
  String[] arrColumns = ["exo:dateCreated;123px", "exo:owner;123px"];
  

  
%>
<link href="//netdna.bootstrapcdn.com/twitter-bootstrap/2.1.1/css/bootstrap.min.css" rel="stylesheet">


<style>
  h1, h2, h3, h4, h5, h6{
    font-family: "Helvetica Neue",Helvetica,Arial,sans-serif;
    font-weight: bold;
    color: #404040;
  }
  body{
    font-family: "Helvetica Neue",Helvetica,Arial,sans-serif;
    font-weight: normal;
    color: #404040;
  }
  
  .dropdown-menu li > a:hover, .dropdown-menu .active > a, .dropdown-menu .active > a:hover {
    background-color: #0088CC;
  }
  
  
  .dropdown-menu a{
    color: #555555 !important;
  }
  
  
  .hero-unit {
    background-color: #F5F5F5;
  }
  #main article {
    border-bottom: none;
  }
  
  img.avatar {
    height: 40px;
    width: 40px;
  }
  
.UIPresentationContainer a {
    color: #08C;
}   
  
  a.tag {
    color: white;
  }
  
  input[type="text"] {

    padding: 0px;

  }
  
  .PublicationPublishIcon {
    height: 24px;
    background: url("/ecmexplorer/skin/icons/24x24/DefaultSkin/PublicationPublish.png") no-repeat scroll left center transparent;
}

  
 
</style>


<div id="$componentId">
<table id="${componentId}-$viewComponentId" class="table table-striped">
        <%
          selectedSortType = uicomponent.getTypeSort()   
          sortOrder = uicomponent.getSortOrder()
          typeActionLink = (sortOrder.equals("BlueDownArrow")) ? "Descending;" : "Ascending;"

          def sortHandleClass(def type) {
              return (selectedSortType.equals(type)) ? "SortButton ${sortOrder}16x16Icon" : ""         
          }
        %>  
  <thead>
    <tr>
      <th class="<%=sortHandleClass("Type")%>" style="cursor:pointer;" onclick="<%=uicomponent.event("Sort", typeActionLink + "Type")%>">&nbsp;</th>
      <th class="<%=sortHandleClass("Alphabetic")%>" style="cursor:pointer;" onclick="<%=uicomponent.event("Sort", typeActionLink + "Alphabetic")%>">Title</th>
      <th class="<%=sortHandleClass("Date")%>" style="cursor:pointer;" onclick="<%=uicomponent.event("Sort", typeActionLink + "exo:dateCreated")%>">Last Change</th>
      <th><i class="icon-comment" title="Comments"></i></th>
    </tr>
  </thead>
  
  <tbody>  
      
      <%        
        String portalName = uicomponent.getPortalName() ;
        RepositoryService rService = uicomponent.getApplicationComponent(RepositoryService.class) ;
        String repository = rService.getCurrentRepository().getConfiguration().getName();
        String restContextName = Utils.getRestContextName(portalName);
        WCMPublicationService wcmPublicationService = uicomponent.getApplicationComponent(WCMPublicationService.class);
        def permlink;
        int i = 0;
        for (data in uicomponent.getChildrenList()) {
          try {
            data.getSession().getItem(data.getPath());
          } catch(PathNotFoundException pne) {
            continue;
          }
          
          // do not display categories)
          if (data.isNodeType("exo:taxonomy")) continue;
          
          i++;
          def isPreferenceNode = uicomponent.isPreferenceNode(data) ;
          def preferenceWS = data.getSession().getWorkspace().getName() ;
          String nodePath = data.getPath() ;
          def isSymLink = false;
          isSymLink = uicomponent.isSymLink(data);
          // Content view
          //   Status
          def status = "";
          def targetNode;
          if(isSymLink) {
            targetNode = linkManager.getTarget(data);            
            status = wcmPublicationService.getContentState(targetNode);
          } else {
            status = wcmPublicationService.getContentState(data);
          }
          if (status == null) status = "";
 
          def statusLabel = _ctx.appRes("UIPublicationPanel.status." + status)
 
          // a dirty post is a post modified after publication
          def dirty = isDirty(data, status)
          
          //   Title
          def title = uiWorkingArea.getTitle(data);   
        
          
          //   Name
          def name = nodePath.substring(nodePath.lastIndexOf("/") + 1, nodePath.length()) ;
          name = ContentReader.getXSSCompatibilityContent(name);         
          //   Datetime
          def date = getDate(data, status);
          def datetime = dateFormat.format(date);

          
          //   Author
          def users = organizationService.getUserHandler();
          def author = ""
          try {
            author = uicomponent.getNodeOwner(data)
            author = users.findUserByName(author).getFullName()
          } catch (Exception e) {
            ; // ignore
          }

          //   Last User
          def lastUser = "";
          try {
            if (data.hasProperty("publication:lastUser")) {
              lastUser = data.getProperty("publication:lastUser").getValue().getString();
              lastUser = users.findUserByName(lastUser).getFullName()
            }
            
          } catch (Exception e) {
            ; // ignore
          }
          

          def datevent = ""

          if ("draft".equals(status)) {
            datevent = "Modified"
          } else if ("published".equals(status)) {
            datevent = "Published"
          }
          
          def commentCount = 0;
          try {
            def comments = uicomponent.getApplicationComponent(CommentsService.class).getComments(targetNode, null)
            commentCount = comments.size
          } catch (Exception e) {
            ; // ignore
          }
   
          
          // Content view
          
          String subName ;
          String actionLink = uicomponent.event("ChangeNode",Utils.formatNodeName(data.path), new Parameter("workspaceName", preferenceWS)) ;
          //Begin permlink
          permLinkComponent =  uiWorkingArea.getPermlink(data);
          String strActs = "<div class=\"RightClickCustomItem\" style=\"display: none;\">" ;
          if (permLinkComponent != null) {
            permlink = permLinkComponent.getUIExtensionName();
            strActs +=  "<a class='MenuItem' style='display: block;' href=\"" + permLinkComponent.getPermlink(data) + "\" target='_new' onclick=\"return eXo.ecm.WCMUtils.hideContextMenu(this);\">" ;
            strActs +=  " <div class='ItemIcon ${permlink}16x16Icon'>" ;
            strActs +=    _ctx.appRes("ECMContextMenu.event." + permlink);
            strActs +=  " </div>";
            strActs +=  "</a>";
          }
          
          //Begin WebDav Action
          if (!data.isNodeType(Utils.EXO_RESTORELOCATION) && !Utils.isTrashHomeNode(data)) {
            if (data.getPrimaryNodeType().getName().equals("nt:file")) {
              String mimeType="";
              try {
                mimeType=data.getNode("jcr:content").getProperty("jcr:mimeType").getString();
              } catch (Exception e) {                      
              }
              // This escape "'" for js
              String webDavPath = data.getPath().contains("%27") ? data.getPath().replaceAll("%27","%2527") : data.getPath();
              String link ="javascript:eXo.ecm.ECMUtils.generateWebDAVLink('','"+ portalName +"','"+ restContextName +"','"+repository+"','"+ preferenceWS+ "','" + webDavPath +"','"+mimeType+"')";                                   
              strActs +=    "<a class=\"MenuItem\" style='display: block;' onclick=\"return eXo.ecm.WCMUtils.hideContextMenu(this);\" href=\"" + link + "\" >" ;          
              strActs +=    "  <div class=\"ItemIcon WebDAV16x16Icon\">" + _ctx.appRes("ECMContextMenu.event.WebDavView") + "</div>" ;
              strActs +=    "</a>" ;            
            } else {
              def dataTarget = data;
              if(uicomponent.isSymLink(data)) dataTarget = Utils.getNodeSymLink(data);
              if (dataTarget != null) {
                String link = "/" + restContextName + "/private/jcr/" + repository+ "/" + preferenceWS + Utils.formatNodeName(dataTarget.getPath()); 
                strActs +=    "<a class=\"MenuItem\" style='display: block; {behavior: url(#default#AnchorClick);}' onclick=\"return eXo.ecm.WCMUtils.hideContextMenu(this);\" href=\"" +link + "\" target='_new' folder=\"" + link +"\">" ;          
                strActs +=    "  <div class=\"ItemIcon WebDAV16x16Icon\">" + _ctx.appRes("ECMContextMenu.event.WebDavView") + "</div>" ;
                strActs +=    "</a>" ;
              }
            }
          } //End WebDav Action
          
          List customActs = uicomponent.getCustomActions(data);  
          Parameter[] params ;
          if (customActs.size() > 0) {            
            for (act in customActs) {
              String actName = act.getProperty("exo:name").getValue().getString() ;
              params = [new Parameter("workspaceName", preferenceWS), new Parameter("actionName",Utils.formatNodeName(act.getName()))] ;
              strActs += "<a class=\"MenuItem\" style='display: block;' onclick=\"return eXo.webui.UIRightClickPopupMenu.prepareObjectId(event, this);\" href=\"" + uiCustomActionComponent.event("Custom",Utils.formatNodeName(nodePath),params) + "\">" ;
              strActs += "  <div class=\"ItemIcon " + Utils.getNodeTypeIcon(act, "16x16Icon") + "\">$actName</div>" ;
              strActs += "</a>" ;
            }            
          }
          
          if (!data.isNodeType(Utils.EXO_RESTORELOCATION) && !Utils.isTrashHomeNode(data)) {
            String clipboardLink = "/" + restContextName + "/private/jcr/" + repository + "/" + preferenceWS + data.getPath();
            strActs +=  "<a class='MenuItem' style='display: block;' id='clip_button1$i' path='$clipboardLink' onclick=\"eXo.ecm.ECMUtils.pushToClipboard(event,'$clipboardLink');\">" ;
            strActs +=  " <div class='ItemIcon GetURL16x16Icon'>" ;
            strActs +=    _ctx.appRes("ECMContextMenu.event.GetURL");
            strActs +=  " </div>" ;
            strActs +=  "</a>";
          }
          strActs += "</div>";
          def rightClickMenu = "" ;
          Boolean isLocked = false;
          String lockedLabel = "";
          String isFavourite = "false";
          String isInTrash = "false";
          String isMediaType = "false";
          String isTrashHome = "false";
          String hiddenStyle = (data.isNodeType("exo:hiddenable"))?"color: #A0A0A0;":"";
          if (data.isLocked()) {
            isLocked = true;
            lockedLabel  = "("+_ctx.appRes("UIDocumentWorkspace.tooltip.LockedBy")+" "+data.getLock().getLockOwner()+")";
          }
          if (uicomponent.isFavouriter(data)) isFavourite = "true";
          if (data.isNodeType("exo:restoreLocation")) isInTrash = "true";
          if (uicomponent.isMediaType(data)) isMediaType = "true";
          if (Utils.isTrashHomeNode(data)) isTrashHome = "true"
          if (!uicomponent.isSystemWorkspace()) rightClickMenu = contextMenu.getJSOnclickShowPopup(preferenceWS + ":" + Utils.formatNodeName(nodePath), uiWorkingArea.getActionsExtensionList(data)) ;            
          def iconLabel = statusLabel
          if (isLocked) iconLabel += " - " + lockedLabel
          def statusIcon = ("published".equals(status)) ? "PublicationPublishIcon" : "PublicationDraftIcon"

      %>
    <tr <%=rightClickMenu%> class="RowView Normal ClearFix" trashHome="$isTrashHome" locked="$isLocked" mediaType="$isMediaType" removeFavourite="$isFavourite" inTrash="$isInTrash" workspacename="$preferenceWS" objectId="<%=URLEncoder.encode(Utils.formatNodeName(nodePath), "utf-8")%>" ondblclick="$actionLink">$strActs
      <td ><div title="$iconLabel" class="Icon16x16 default16x16Icon"> <% if ("published".equals(status)) {%> <img src="/ecmexplorer/skin/icons/16x16/DefaultSkin/SelectCheck.gif"></img><%}%></div>
                  <%if(isLocked) {%>
                    <div class="IconLocked"></div>
                  <%}%>
                 
                        
      </td>
      <td title="$title $lockedLabel"><strong>$title</strong><%if ("draft".equals(status)) {%> - <span class="label label-important">$statusLabel</span><%}%>
        <br/><small><span class="muted">by $author</span></small>
      </td>
      <td title="$datevent on $datetime">$datevent on $datetime</td>
      <td><span class="label label-info">$commentCount</span></td>
    </tr>
    


      <%
        } // end loop on posts
      %>    
    

  </tbody>
</table>
        <div style="position: relative; top: 0px; left: 0px; width: 0px; height: 0px">
          <div class="Mask" style="position: absolute; top: 0px; left: 0px; width: 0px; height: 0px"></div>
          <div class="JCRMoveAction" style="display: none;" request="<%=uiWorkingArea.getJCRMoveAction().event(UIWorkingArea.MOVE_NODE)%>" symlink="<%=uiWorkingArea.getCreateLinkAction().event(UIWorkingArea.CREATE_LINK)%>"></div>
          <div class="ItemContextMenu" style="position: absolute; top: 0px; left: 0px; display: none;">
            <div class="UIRightClickPopupMenu" style="display: block;">
              <div class="UIRightPopupMenuContainer" onmousedown="event.cancelBubble = true;" onkeydown="event.cancelBubble = true;">
                <%
                  for(itemContext in managersMultiItemContext) {
                    action = itemContext.getUIExtensionName();
                    %>
                      <a class="MenuItem" style="display: block;" onclick=eXo.ecm.UIListView.postGroupAction("<%=itemContext.event(action)%>")>
                        <div class="ItemIcon ${action}16x16Icon"><%=_ctx.appRes("ECMContextMenu.event." + action)%></div>
                      </a>
                    <%
                  }
                %>
              </div>
            </div>
          </div>
          <div class="GroundContextMenu" style="position: absolute; top: 0px; left: 0px; display: none;">
            <div class="UIRightClickPopupMenu" style="display: block;">
              <div class="UIRightPopupMenuContainer" onmousedown="event.cancelBubble = true;" onkeydown="event.cancelBubble = true;">
                <%
                  for(itemGroundContext in managersGroundContext) {
                    action = itemGroundContext.getUIExtensionName();
                    %>
                      <a class="MenuItem" href="<%=itemGroundContext.event(action)%>" style="display: block;">
                        <div class="ItemIcon ${action}16x16Icon"><%=_ctx.appRes("ECMContextMenu.event." + action)%></div>
                      </a> 
                    <%
                  }
                %>
              </div>
            </div>
          </div>
        </div>

    <% 
      //re-initialize action
      uiWorkingArea.initialize();
      int availablePage = uicomponent.getContentPageIterator().getAvailablePage();
      if (availablePage > 1) { 
        %>
          <div class="PageAvailable" pageAvailable='$availablePage'>
            <%_ctx.renderUIComponent(uicomponent.getContentPageIterator())%>
          </div>
        <%
      }
    %>

</div>
