<%
import java.util.HashSet;
import java.util.List;
import java.text.SimpleDateFormat;

import javax.jcr.Node;

import org.exoplatform.portal.webui.util.Util;
import org.exoplatform.services.jcr.RepositoryService;
import org.exoplatform.services.jcr.core.ManageableRepository;
import org.exoplatform.services.jcr.ext.hierarchy.NodeHierarchyCreator;
import org.exoplatform.services.organization.OrganizationService;
import org.exoplatform.services.organization.UserHandler;
import org.exoplatform.services.wcm.core.NodeLocation;
import org.exoplatform.services.cms.comments.CommentsService;
import org.exoplatform.services.cms.folksonomy.NewFolksonomyService;
import org.exoplatform.services.cms.taxonomy.TaxonomyService;
import org.exoplatform.social.core.manager.IdentityManager;
import org.exoplatform.social.core.identity.provider.OrganizationIdentityProvider;
import org.exoplatform.wcm.webui.Utils;


def node = uicomponent.node
def post = uicomponent.originalNode
def uuid = post.getUUID()
def viewer = _ctx.getRequestContext().getRemoteUser()
def title = post.getProperty("exo:title").string
def poster = post.getProperty("exo:owner").string
def author = fullName(poster)
def avatar = avatarUrl(poster)


def formatter =  new SimpleDateFormat("MMM d, yyyy")
def date = formatter.format(post.getProperty("exo:dateCreated").date.time)  

%>
<link href="//netdna.bootstrapcdn.com/twitter-bootstrap/2.1.1/css/bootstrap.min.css" rel="stylesheet">

<style>
  h1, h2, h3, h4, h5, h6{
    font-family: "Helvetica Neue",Helvetica,Arial,sans-serif;
    font-weight: bold;
    color: #404040;
  }
  body{
    font-family: "Helvetica Neue",Helvetica,Arial,sans-serif;
    font-weight: normal;
    color: #404040;
  }
  
  .dropdown-menu li > a:hover, .dropdown-menu .active > a, .dropdown-menu .active > a:hover {
    background-color: #0088CC;
  }
  
  
  .dropdown-menu a{
    color: #555555 !important;
  }
  
  
  .hero-unit {
    background-color: #F5F5F5;
  }
  #main article {
    border-bottom: none;
  }
  
  img.avatar {
    height: 40px;
    width: 40px;
  }
  
.UIPresentationContainer a {
    color: #08C;
}   
  
  a.tag {
    color: white;
  }
  
 
</style>


<link rel="stylesheet" href="/rest/private/jcr/repository/collaboration/sites/intranet/css/bootstrap-responsive.min.css">
<link rel="stylesheet" href="/rest/private/jcr/repository/collaboration/sites/intranet/css/blog.css">
<script src="http://code.jquery.com/jquery-latest.js" type="text/javascript"></script>
<style>
  body {
    padding-top: 0px;
  }
  

</style>
<div class="container-fluid">
  <div id="content" class="clearfix row-fluid">
    <div id="main" class="span11 clearfix" role="main">
      
      <article id="post-$uuid" class="post type-post status-publish format-standard hentry clearfix" role="article">
        <header>
          
          <div class="page-header"><h1 class="single-title" itemprop="headline">$title</h1></div>
          <p class="meta"><a href="/portal/intranet/profile/$poster" title="View author profile" rel="author"><img src="$avatar" title="Avatar of $author" class="avatar"/>&nbsp;$author</a></span> on <time datetime="$date" pubdate>$date</time></p>
        </header> <!-- end article header -->
        
        <section class="post_content clearfix">
          <% renderPost(node)  
          %>
        </section> <!-- end article section -->
        
        <footer>
        <p class="tags"><% tags(post)
        %></p>
        </footer> <!-- end article footer -->
        
      </article> <!-- end article -->  
      
      <% commentForm(post) 
%>     
      <% commentList(post) 
      %>
         
    </div> <!-- end of m ain -->
    <div class="span1" id="sidebar">
<%

  // show edit button
  if ((poster == viewer) && (uicomponent.class.name =="org.exoplatform.wcm.webui.scv.UIPresentation")) {
%>

      <a class="btn btn-mini" href="/portal/intranet/blog/admin?edit=true&path=/collaboration/Groups/platform/users/Documents/Blog/${post.name}&backto=/portal/intranet/blog"><i class="icon-pencil"></i> Edit</a>
<%
  } // end edit button
%>
    </div> <!-- end sidebar -->

  </div> <!-- end #content -->
</div> <!-- end #container -->         
<%



/* display comments of this post */
  void commentList(Node post) {

    try {
    def comments = uicomponent.getApplicationComponent(CommentsService.class).getComments(post, null)
    def formatter =  new SimpleDateFormat("'on' MMM d, yyyy 'at' h:mm a")
    def viewer = _ctx.getRequestContext().getRemoteUser()
      
    if (comments) {
      def plural=""
      if (comments.size > 1) plural = "s"
%>
      <a name="commentlist"></a>
      <h3 id="comments"><span>${comments.size}</span> comment${plural}</h3>
      <ol class="commentlist">
<%
      int i=0;

      for (comment in comments) {
        try {
          def rem = ((i++)%2 == 0)?"even":"odd"      
          def commentor = comment.getProperty("exo:commentor").string
          def commentorAvatar = avatarUrl(commentor)
          def commentorName = fullName(commentor)
          def commentContent = comment.getProperty("exo:commentContent").string
          def commentDate = formatter.format(comment.getProperty("exo:commentDate").date.time)
          def isOwner = (commentor == viewer)
%>      
        <li class="comment $rem thread-$rem depth-1">
          <div id="comment-${comment.name}" class="well clearfix">
            <div class="comment-author vcard row-fluid clearfix">
              <div class="avatar span1">
                <img alt="" src="$commentorAvatar" class="avatar avatar-75 photo">
              </div>
              <div class="span11 comment-text">
                <h4><a href="/portal/intranet/profile/$commentor" rel="external nofollow" class="url">$commentorName</a></h4>   
                <a name="commentdate-${comment.name}">$commentDate</a>                
                <p>$commentContent</p>
                
              </div>
            </div>
          </div>
        </li>          
<%         
         
          } catch (Exception e) {
           print e
           continue; // don't wanna mess with broken comments,, so we skip them
          }
        } // end loop on comments
%>
      </ol>
<%
      } // end if comments
    } catch (Exception e) {
      print e // don't say anything
    }
  } // end comment list

  /* render the comment form */
  void commentForm(Node post) {

    try {
      //def post = uicomponent.originalNode
      def uuid = post.getUUID()
      def viewer = _ctx.getRequestContext().getRemoteUser()
      def fme = fullName(viewer)
      def avt = avatarUrl(viewer)
%>
<script type="text/javascript">
        //<![CDATA[
        
  var jq = jQuery.noConflict();
        
  jq(function() {  
          jq("#btn-$uuid").click(function(event) {
            event.preventDefault();  
            
            var aform = jq("#commentform-$uuid");
            var comment = aform.find( 'input[name="comment"]' ).val();
            var path = aform.find( 'input[name="jcrPath"]' ).val();       
            jq.ajax({
              type: "POST",
              url: "/rest/contents/comment/add",
              data: { comment: comment, jcrPath:path},
              success: function() {
                jq('#respond-$uuid').html("<div id='message'></div>");
                jq('#message').html('<div class="alert alert-success"><p>Your comment has been posted.</p></div>')
                  .hide()
                  .fadeIn(1500);
              }
            }); // end ajax
            return false;
          }); // end click on button
                
  }); // end jq  
//]]>
</script>  
    
<section id="respond-$uuid" class="respond-form">        
        <form class="form-inline" id="commentform-$uuid" name="commentform-$uuid">
          <div class="input">    
            <img src="$avt" class="avatar" title="Avatar of $fme"/>
            <input type="text" name="comment" id="comment-$uuid" placeholder="Your Comment Hereâ€¦"  style="width: 390px; height: 32px; font-size: 1.1em;"  tabindex="0" />
            <input name="jcrPath" type="hidden" value="/repository/collaboration${post.path}"/>
            <input type="submit" value="Post Comment" class="btn btn-large" tabindex="1" id="btn-$uuid" />
          </div>
        </form>
</section>
<%
    } catch (Exception e) {
      print e
    }
  } // end comment form




  /* render tags of an article */
  void tags(def node) {
  def folkService = uicomponent.getApplicationComponent(NewFolksonomyService.class)
  def tags = folkService.getLinkedTagsOfDocument(node, "collaboration")
  def i = 0;
  
  if (!tags) {
    tags = [];
  }
  else {
%>
<span class="tags-title">Tags:</span>
<%
    }
    
    for(tag in tags) {
      def name = tag.name
      def url="/portal/intranet/blog?folder-id=repository:collaboration:/tags/$name"
%>
<a href="$url" title="View all posts in $name" rel="category tag" class="label tag">$name</a>
<%

if (i++ < (tags.size-1)) print " "

} //end loop on  tags


} //end renderTags    



    
  /* (only display  viewable webcontents here */
  boolean isValidBlogEntry(def node) {
    def frozen = node.primaryNodeType.name == "nt:frozenNode"
    if (frozen) {
      def viewable = Utils.isViewable(node)
      def type = node.getProperty("jcr:frozenPrimaryType").string
      if (viewable && ((type == "exo:webContent") || (type == "exo:blog"))) {
        return true;
      }
    }
    return false;
  }
    
  /* render a blog entry */
  void renderPost(def entry) {
    try {
  
    def cssOption = "CSSData=";
    def excerpt = getSummary(entry);
   
    // start with the excerpt
    if (excerpt) {
%>
<em>$excerpt</em>
<%
    } // end if excerpt
    
    // print the main content
    def html = entry.getNode("default.html/jcr:content").getProperty("jcr:data").string
    print uicomponent.getInlineEditingField(entry, "default.html/jcr:content/jcr:data", html, "WYSIWYG", "Text", "Content", true, cssOption, "toolbar=CompleteWCM");
%>
<%
  
    } catch (Exception e) {
      print e;
    }
  } // end render post
  
  
  
  //boolean isShowCategories = getPortletPreference("ShowCategories");
  //boolean isShowTags = getPortletPreference("ShowTags");
  /* get the portlet preferences by name */
  boolean getPortletPreference(String name) {
    String value = _ctx.requestContext.request.preferences.getValue(name, null);
    if(value != null) return Boolean.parseBoolean(value);
    return false;
  }  
    
 /* get summary or desription */  
 String getSummary(Node node) throws Exception {
    String desc = null;
    if (node.hasProperty("exo:summary")) {
      desc = node.getProperty("exo:summary").getValue().getString();
    } else if (node.hasNode("jcr:content")) {
      Node content = node.getNode("jcr:content");
      if (content.hasProperty("dc:description")) {
        try {
          desc = content.getProperty("dc:description").getValues()[0].getString();
        } catch (Exception ex) {
          return null;
        }
      }
    }
    return desc;
  }  // end getSummary
    
    
  /* get the full name from poster */
  String fullName(def poster) {
    def userHandler = uicomponent.getApplicationComponent(OrganizationService.class).userHandler
    def user = userHandler.findUserByName(poster)
    def name = user.fullName
    return name?name:poster
  }
  
  /* get the url of the avatar */
  String avatarUrl(def poster) {
    String avatar = "/social-resources/skin/ShareImages/Avatar.gif";
    try {
      def identityManager = uicomponent.getApplicationComponent(IdentityManager.class)
      def userIdentity = identityManager.getOrCreateIdentity(OrganizationIdentityProvider.NAME, poster)
      def userProfile = userIdentity.getProfile()
      avatar = userProfile.getAvatarImageSource()
    } catch (Exception e) {
        print e.message // ugly old school debug
    }
    return avatar
  }    

%> 
       
