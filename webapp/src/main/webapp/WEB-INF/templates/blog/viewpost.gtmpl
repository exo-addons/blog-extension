<%
import java.util.HashSet;
import java.util.List;
import java.text.SimpleDateFormat;

import javax.jcr.Node;

import org.exoplatform.portal.webui.util.Util;
import org.exoplatform.services.jcr.RepositoryService;
import org.exoplatform.services.jcr.core.ManageableRepository;
import org.exoplatform.services.jcr.ext.hierarchy.NodeHierarchyCreator;
import org.exoplatform.services.organization.OrganizationService;
import org.exoplatform.services.organization.UserHandler;
import org.exoplatform.services.wcm.core.NodeLocation;
import org.exoplatform.services.cms.comments.CommentsService;
import org.exoplatform.services.cms.folksonomy.NewFolksonomyService;
import org.exoplatform.services.cms.taxonomy.TaxonomyService;
import org.exoplatform.social.core.manager.IdentityManager;
import org.exoplatform.social.core.identity.provider.OrganizationIdentityProvider;
import org.exoplatform.wcm.webui.Utils;


def node = uicomponent.node
def post = uicomponent.originalNode
def uuid = post.getUUID()
def viewer = _ctx.getRequestContext().getRemoteUser()
def title = post.getProperty("exo:title").string
def poster = post.getProperty("exo:owner").string
def author = fullName(poster)
def avatar = avatarUrl(poster)


def formatter =  new SimpleDateFormat("MMM d, yyyy")
def date = formatter.format(post.getProperty("exo:dateCreated").date.time)

def rcontext = _ctx.getRequestContext() ;
def jsManager = rcontext.getJavascriptManager();
jsManager.require("SHARED/blogjs", "blogjs");
%>

<script type="text/javascript" src="http://w.sharethis.com/button/buttons.js"></script>
<script type="text/javascript">var switchTo5x=true;</script>
<script type="text/javascript">stLight.options({publisher: "131ce3d5-a240-42f0-9945-f882036f2d00", doNotHash: false, doNotCopy: false, hashAddressBar: false});</script>
<!---->
<style>

    .dropdown-menu li > a:hover, .dropdown-menu .active > a, .dropdown-menu .active > a:hover {
    background-color: #0088CC;
    }


    .dropdown-menu a{
    color: #555555 !important;
    }


    #main article {
    border-bottom: none;
    }




    a.tag {
    color: white;
    }


</style>
<div class="container-fluid" style="padding: 20px">
    <div id="content" class="clearfix row-fluid">
        <div id="main" class="span11 clearfix" role="main">

            <article id="post-$uuid" class="uiBox post type-post status-publish format-standard hentry clearfix" style="padding:7px" role="article">
                <header>

                    <div class="page-header"><h3 class="single-title" itemprop="headline">$title</h3></div>
                    <p class="meta">
                    <div style="float:left">
                        <a class="avatarXSmall" href="/portal/intranet/profile/$poster" rel="author" data-placement="bottom" data-original-title="$author">
                            <img alt="$author" src="$avatar">
                        </a>
                    </div>
                    <div class="commentRight">
                        <div class="author">
                            <a href="/portal/intranet/profile/$poster">$author</a>
                            <span class="dateTime" datetime="$date">$date</span>
                        </div>
                    </div>
                    </p>
                </header> <!-- end article header -->

                <section class="post_content clearfix">
                    <% renderPost(node)
                    %>
                </section> <!-- end article section -->

                <footer>
                    <p class="tags"><% tags(post)
                        %></p>
										<!--share this-->
                    <span class='st_facebook' displayText='Facebook'></span>
                    <span class='st_googleplus' displayText='Google +'></span>
                    <span class='st_twitter' displayText='Tweet'></span>
                    <span class='st_linkedin' displayText='LinkedIn'></span>
                    <span class='st_pinterest' displayText='Pinterest'></span>
                    <span class='st_email' displayText='Email'></span>

                </footer> <!-- end article footer -->

            </article> <!-- end article -->


            <div class="uiBox">
                <% commentList(post)%>
                <% commentForm(post) %>
            </div>


        </div> <!-- end of m ain -->
        <div class="span1" id="sidebar">
            <%

            // show edit button
            if ((poster == viewer) && (uicomponent.class.name =="org.exoplatform.wcm.webui.scv.UIPresentation")) {
            %>

            <a class="btn btn-mini" href="/portal/intranet/blog/admin?edit=true&path=/collaboration/Groups/platform/users/Documents/Blog/${post.name}&backto=/portal/intranet/blog"><i class="icon-pencil"></i> Edit</a>
            <%
            } // end edit button
            %>
        </div> <!-- end sidebar -->

    </div> <!-- end #content -->
</div> <!-- end #container -->
<%
/* display comments of this post */
void commentList(Node post) {

try {
def comments = uicomponent.getApplicationComponent(CommentsService.class).getComments(post, null)
def formatter =  new SimpleDateFormat("'on' MMM d, yyyy 'at' h:mm a")
def viewer = _ctx.getRequestContext().getRemoteUser()

if (comments) {
def plural=""
if (comments.size > 1) plural = "s"
%>

<style>
    /* TODO : we should reuse activity stream comments style instead of redeclaring*/

    .commentList {
    padding: 15px 15px 0 15px;
    }
    .commentList .commentItem {
    position: relative;
    }
    .commentList .commentItem .commmentLeft {
    float: left;
    }
    .commentRight {
    margin-left: 45px;
    paddin-top: 7px
    }
    .author a {
    font-family: "Helvetica Neue Bold",Helvetica,Lucida,Arial,sans-serif;
    font-weight: bold;
    word-wrap: break-word;
    color: #2f5e92;
    text-decoration: none;
    }
    .author a+span {
    margin-left: 10px;
    color: #999;
    }
    .contentComment {
    word-wrap: break-word;
    }
    .commentList .commentItem .ContentBlock {
    word-wrap: break-word;
    }
</style>
<h5 class="title">${comments.size} comment${plural}</h5>
<div class="commentList">
    <div>
        <%
        int i=0;

        for (comment in comments) {
        try {
        def rem = ((i++)%2 == 0)?"even":"odd"
        def commentor = comment.getProperty("exo:commentor").string
        def commentorAvatar = avatarUrl(commentor)
        def commentorName = fullName(commentor)
        def commentContent = comment.getProperty("exo:commentContent").string
        def commentDate = formatter.format(comment.getProperty("exo:commentDate").date.time)
        def isOwner = (commentor == viewer)
        %>


        <div class="commentItem" id="comment-${comment.name}">

            <div class="commmentLeft">
                <a class="avatarXSmall" href="/portal/intranet/profile/$commentor" rel="tooltip" data-placement="bottom" data-original-title="$commentorName">
                    <img alt="$commentorName" src="$commentorAvatar">
                </a>
            </div><!--end commentLeft-->
            <div class="commentRight">
                <div class="author">
                    <a href="/portal/intranet/profile/$commentor">$commentorName</a>
                    <span class="dateTime">$commentDate</span>
                </div>
                <p class="contentComment"></p><p class="ContentBlock">$commentContent</p><p></p>
            </div><!--end commentRight-->

        </div><!--end commentItem-->

        <%

        } catch (Exception e) {
        print e
        continue; //skip broken comments
        }
        } // end loop on comments
        %>
    </div>
</div> <!--end commentlist-->
<%
} // end if comments
else {
%>
<h5 class="title">Comments</h5>
<%
}
} catch (Exception e) {
print e // don't say anything
}
} // end comment list

/* render the comment form */
void commentForm(Node post) {

try {
//def post = uicomponent.originalNode
def uuid = post.getUUID()
def viewer = _ctx.getRequestContext().getRemoteUser()
def fme = fullName(viewer)
def avt = avatarUrl(viewer)
%>

<style>
    /* TODO : we should reuse activity stream comment form style instead of copying*/
    .inputContainer .commentItem {
        padding-bottom: 15px;
    }
    .inputContainer {
        padding-top: 0;
    }

    .commentList .commentItem .commmentLeft {
        float: left;
    }
    .commentRight {
        margin-left: 45px;
        padding-top: 7px;
    }
    .commentList .commentItem .commentInputBox {
        padding: 3px 0 0;
    }
    .commentList .commentItem .commentInputBox .commentInput {
        margin-right: 112px;
    }

</style>

<div class="commentList inputContainer inputContainerShow" style="display: block;">
    <div class="commentItem commentFormBox" id="respond-$uuid">

        <div class="commmentLeft">
            <a class="avatarXShttp://localhost:8080/portal/intranet/mall" rel="tooltip" data-placement="bottom" href="/portal/intranet/profile/$viewer" data-original-title="$fme">
                <img src="$avt" alt="$fme">
            </a>
        </div><!--end commentLeft-->
        <div class="commentRight">
            <div class="commentInputBox ">
                <form class="form-inline" id="commentform-$uuid" name="commentform-$uuid">
                    <input name="jcrPath" type="hidden" value="/repository/collaboration${post.path}"/>

                    <input type="text" name="comment" id="comment-$uuid" placeholder="Your Comment Hereâ€¦"  style="margin-bottom: 7px; height: 28px; resize: none; max-height: 28px;"  tabindex="0" />
                    <input type="submit" value="Post Comment" class="btn btn-primary" rel="tooltip" data-placement="bottom" id="btn-$uuid" data-original-title="Comment" onclick="eXo.ecm.blog.postComment('$uuid')" />
                </form>
            </div>
        </div><!--end commentRight-->
    </div> <!--end commentItem-->
</div><!--end commentlist-->

<%
} catch (Exception e) {
print e
}
} // end comment form




/* render tags of an article */
void tags(def node) {
def folkService = uicomponent.getApplicationComponent(NewFolksonomyService.class)
def tags = folkService.getLinkedTagsOfDocument(node, "collaboration")
def i = 0;

if (!tags) {
tags = [];
}
else {
%>
<span class="tags-title">Tags:</span>
<%
}

for(tag in tags) {
def name = tag.name
def url="/portal/intranet/blog?folder-id=repository:collaboration:/tags/$name"
%>
<a href="$url" title="View all posts in $name" rel="category tag" class="label tag">$name</a>
<%

if (i++ < (tags.size-1)) print " "

} //end loop on  tags


} //end renderTags




/* (only display  viewable webcontents here */
boolean isValidBlogEntry(def node) {
def frozen = node.primaryNodeType.name == "nt:frozenNode"
if (frozen) {
def viewable = Utils.isViewable(node)
def type = node.getProperty("jcr:frozenPrimaryType").string
if (viewable && ((type == "exo:webContent") || (type == "exo:blog"))) {
return true;
}
}
return false;
}

/* render a blog entry */
void renderPost(def entry) {
try {

def cssOption = "CSSData=";
def excerpt = getSummary(entry);

// start with the excerpt
if (excerpt) {
%>
<em>$excerpt</em>
<%
} // end if excerpt

// print the main content
def html = entry.getNode("default.html/jcr:content").getProperty("jcr:data").string
print uicomponent.getInlineEditingField(entry, "default.html/jcr:content/jcr:data", html, "WYSIWYG", "Text", "Content", true, cssOption, "toolbar=CompleteWCM");
%>
<%

} catch (Exception e) {
print e;
}
} // end render post



//boolean isShowCategories = getPortletPreference("ShowCategories");
//boolean isShowTags = getPortletPreference("ShowTags");
/* get the portlet preferences by name */
boolean getPortletPreference(String name) {
String value = _ctx.requestContext.request.preferences.getValue(name, null);
if(value != null) return Boolean.parseBoolean(value);
return false;
}

/* get summary or desription */
String getSummary(Node node) throws Exception {
String desc = null;
if (node.hasProperty("exo:summary")) {
desc = node.getProperty("exo:summary").getValue().getString();
} else if (node.hasNode("jcr:content")) {
Node content = node.getNode("jcr:content");
if (content.hasProperty("dc:description")) {
try {
desc = content.getProperty("dc:description").getValues()[0].getString();
} catch (Exception ex) {
return null;
}
}
}
return desc;
}  // end getSummary


/* get the full name from poster */
String fullName(def poster) {
def userHandler = uicomponent.getApplicationComponent(OrganizationService.class).userHandler
def user = userHandler.findUserByName(poster)
def name = user.fullName
return name?name:poster
}

/* get the url of the avatar */
String avatarUrl(def poster) {
String avatar = "/social-resources/skin/ShareImages/Avatar.gif";
try {
def identityManager = uicomponent.getApplicationComponent(IdentityManager.class)
def userIdentity = identityManager.getOrCreateIdentity(OrganizationIdentityProvider.NAME, poster)
def userProfile = userIdentity.getProfile()
if (userProfile.getAvatarImageSource()) avatar = userProfile.getAvatarImageSource()
} catch (Exception e) {
print e.message // ugly old school debug
}
return avatar
}

%>
       
